Description:  CloudFormation template to deploy a VPC with two public subnets and two private subnets spread
  across four Availability Zones. Also to create an auto scaling group and application load balancer.

Parameters: 
  EnvironmentName: 
    Description: ALBCloudFormation
    Type: String

  VPCCIDR: 
    Description: Enter CIDR notation for VPC
    Type: String
    Default: 10.10.0.0/16

  PublicSubnet1CIDR: 
    Description: Enter CIDR notation for public subnet in first Availability Zone
    Type: String
    Default: 10.10.1.0/24
 
  PublicSubnet2CIDR: 
    Description: Enter CIDR notation for public subnet in second Availability Zone
    Type: String
    Default: 10.10.2.0/24

  PrivateSubnet1CIDR: 
    Description: Enter CIDR notation for public subnet in third Availability Zone
    Type: String
    Default: 10.10.3.0/24

  PrivateSubnet2CIDR: 
    Description: Enter CIDR notation for public subnet in third Availability Zone
    Type: String
    Default: 10.10.4.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    DeletionPolicy: Delete
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPCCloudFormation

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DeletionPolicy: Delete
    Properties:
      Tags:
        - Key: Name
          Value: IGWCloudFormation

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DeletionPolicy: Delete
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ3)

  PrivateSubnet2: 
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 3, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ4)

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DeletionPolicy: Delete
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIP.AllocationId'
      SubnetId: !Ref PublicSubnet1

  Route:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2


  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupName: ALB-CloudFormation-sg
      GroupDescription: Allow SSH and HTTP
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Allow SSH HTTP

  ALBCloudFormationLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DeletionPolicy: Delete
    Properties:
      LaunchTemplateName: ALBAutoScaling
      LaunchTemplateData:
        ImageId: ami-04823729c75214919
        InstanceType: t2.micro
        KeyName: Yosi-KP
        NetworkInterfaces: 
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref WebServerSecurityGroup
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo amazon-linux-extras install epel -y
            sudo yum install stress -y
            sudo yum install -y httpd
            sudo systemctl start httpd
            sudo systemctl enable httpd
            sudo echo "<h1>Hello from ALB Cloud Formation</h1>" > /var/www/html/index.html

  ALBCloudFormationLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DeletionPolicy: Delete
    Properties:
      LaunchTemplateName: ALBAutoScaling
      LaunchTemplateData:
        ImageId: ami-04823729c75214919
        InstanceType: t2.micro
        KeyName: Yosi-KP
        NetworkInterfaces: 
          - DeviceIndex: 0
            AssociatePublicIpAddress: false
            Groups:
              - !Ref WebServerSecurityGroup
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo amazon-linux-extras install epel -y
            sudo yum install stress -y
            sudo yum install -y httpd
            sudo systemctl start httpd
            sudo systemctl enable httpd
            sudo echo "<h1>Hello from ALB Cloud Formation</h1>" > /var/www/html/index.html

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DeletionPolicy: Delete
    Properties:
      MinSize: '2'
      MaxSize: '5'
      DesiredCapacity: '3'
      LaunchTemplate:
        LaunchTemplateId: !Ref ALBCloudFormationLaunchTemplate
        Version: !GetAtt ALBCloudFormationLaunchTemplate.LatestVersionNumber
      HealthCheckType: ELB
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs: 
        - !Ref ALBTargetGroups

  cpuUsage:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50

  ScalingPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      ScalingAdjustment: '1'
   
  CloudWatchAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '50'
      AlarmDescription: Alarm if CPU higher than 50%
      Period: '60'
      AlarmActions:
        - !Ref ScalingPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization


  ALBTargetGroups:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckPath: /index.html
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: ALBCloudFormationTG

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
      - !Ref WebServerSecurityGroup
      Subnets: 
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: CloudFormationALB

  ALBlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroups
      LoadBalancerArn: !Ref ALB
 
      
Outputs:
  VPC:
    Description: Reference to created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: List of public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2]]

  PublicSubnet1:
    Description: Reference to public subnet in 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: Reference to public subnet in 2nd Availability Zone
    Value: !Ref PublicSubnet2
  
  PrivateSubnet1:
    Description: Reference to private subnet in 3rd Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: Reference to private subnet in 3rd Availability Zone
    Value: !Ref PrivateSubnet2

    
  WebServerSecurityGroup:
    Description: Security group with ingress rule
    Value: !Ref WebServerSecurityGroup